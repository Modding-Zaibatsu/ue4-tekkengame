INTSourceChangelist:2940199
Availability:Public
Title:モバイル デバイスのパフォーマンス ガイドライン
Crumbs:%ROOT%, Platforms, Platforms/Mobile
Description:モバイル ゲーム用コンテンツと機能の最適化
Platform:Mobile
Version:4.9
parent:Platforms/Mobile
order:6
type:overview
tags:mobile

[TOC(start:2)]



以下は、モバイル プラットフォーム上のパフォーマンスを最大に発揮させるための 
コンテンツ最適化の方法に関する提案です。要求の高いものから簡単なものまで紹介します。

* デバイスで実行する前にライティングがビルドされていることをご確認ください。
* ポストプロセス機能はほとんどが無効化されていることをご確認ください。実際、 iPad4 で使用するポストプロセスはビネットを含めて Temporal AA と Film だけです。PC と モバイル間の設定は同じなので、 Bloom や DOF などの負荷の大きい機能群はデフォルトで無効になっています。デフォルト設定のポストプロセス機能を使うと、60+ms を軽く超えます。ハイエンド デバイスで Bloom、DOF、ライトシャフトが使用できるようにしたいです。`show postprocessing` は PP の切り替えと負荷量の表示に使用できます。
* 事前計算されたプロパティを、必ず正しく設定するようにしてください。そのためには、プレーヤーが歩行可能な場所の周りに PrecomputedVisibilityVolumes を配置し、ライティングをビルドする必要があります。ライティングのビルド時およびゲームの実行時には、同じ P レベルを必ず使用するようにしてください (aka 自体はビルドを行いません)。デバイス上あるいはプレビューに `stat initviews` と入力すると動作を確認ができます。[Statically occluded primitives] が >0 になるようにしてください。`r.ShowPrecomputedVisibilityCells 1` を使用して、エディタでセルを視覚化します。
* シェードは各ピクセル一回だけの場合がほとんどなので、マスクされた透過マテリアルを慎重に画面のカバーしている小さい部分のみに使用します。ただし、マスクされた透過マテリアルの場合、すべてのレイヤーはシェードされなければなりません。オーバードローにより、フレームの GPU 時間の合計は簡単に 2 倍以上にできます。モバイル プレビュアの Shader complexity ビューモードでホット スポットを調査します。
* シーン全体の描画コールはどのビューに対しても &lt;= 700 でなければなりません。ランドスケープを見渡すなど、オクルージョンが弱い領域には非常に難しくなります。デバイスでは `stat openglrhi`、 PC の ES2 previewer では `stat d3d11rhi` で確認できます。
* シーン全体のトライアングル数はどのビューに対しても &lt;= 500 でなければなりません。iPad4 と iPad Air の両方で、ポリゴン数が 30fps となる必要があると判断されています。デバイスでは `stat openglrhi`、 PC の ES2 previewer では `stat d3d11rhi` で確認できます。
* マテリアルに使用するテクスチャ ルックアップとインストラクションは出来る限り少なくすべきです。5 つのテクスチャ サンプリングを使用できますが、これら全部を使うとかなり負荷の高いマテリアルになります。差し当たり、PC インストラクション数を使って最適化し、ES2 プレビュア シェーダー複雑度を使って負荷合計を視覚化します。
* マテリアルでは独立したテクスチャ フェッチのみを使用します。ピクセル シェーダー (BaseColor 、 Roughness など) の UV は、スケーリングを始めとするどんな方法でも操作されてはならないという意味です。その代わりに新しい CustomizedUVs 機能を使ってバーテックス シェーダーでスケーリングを行ってください。環境マッピングなどの特別な機能の中には、 UV での計算を必要とする、特別なケースもあります。 
* メモリ消費の少ない正方テクスチャを選択し、常に 2 のべき乗 (512 、 1024 、 2048) のディメンションを使ってください。ES2 プレビュアの listtextures を使って、全てのテクスチャ メモリの行き先を確認します。 

## パフォーマンス ティア

UE4 はモバイル デバイス上で様々なライティング機能をサポートしています。これらの機能を使うとパフォーマンスに負荷がかかり、遅めのモバイル デバイス上でゲームのパフォーマンスが下がる原因となります。UE4 のほとんどのモバイル ライティング機能のミックスおよびマッチが可能な一方で、これらの機能を以下のティアに分類すると便利です。モバイル ゲームのビルド時、ゲームに要求されるグラフの品質およびサポートの必要があるデバイスの種類に合わせて使う機能を判断してください。Epic でテスト済みのデバイスおよび最適と思われるティアに関する詳細は、 [iOS 開発](Platforms/iOS/DeviceCompatibility) のデバイス互換性と [Android 開発](Platforms/Android/DeviceCompatibility) を参照してください。

###LDR (Low Dynamic Range)

Low Dynamic Range または LDR は UE4 がサポートする最も高いパフォーマンス ティアで、ライティングやポストプロセス機能を必要としないゲームにお勧めです。このモードを使用するには、[プロジェクト設定エディタ](Engine/UI/ProjectSettings) のレンダリング セクションで、プロジェクトの「Mobile HDR」を無効にしなければなりません。 

**長所**

* モバイル デバイスで使用できる最速で最安のオーバーヘッド モードです。処理の遅いモバイル デバイスでゲームを効率よく実行することができます。
* カスタム仕様のシェーダーを定義するマテリアル エディタへのフルアクセスはそのままで、さらにライティングをフェードする簡単なシェーディングも実行します。


**制限事項**

* シーンのカラーを、それぞれのカラー チャンネルを [0,1] の範囲でクランプして、ガンマ空間で書き出します。
* 透過プリミティブは、ガンマ空間でブレンドされます。多くの場合、透過テクスチャとマテリアルを HDR や 通常の PC ゲームの場合とは異なる方法で作成することが求められます。
* ポストプロセス機能はこのモードでは使用できません。


**推奨事項**

* すべてのマテリアルのシェーディング モデルが、最大のパフォーマンスが出せる Unlit に設定されるようにしてください。
* ライトをシーンに配置しないでください。さもなければ最大のパフォーマンスはライト次第になってしまいます。
* マテリアルのバーテックス シェーダーのオペレーションを可能な限り多く実行するように配慮してください。そのためには、カスタム仕様の UV を有効にし、ノードを接続し、 Texture Coordinate ノードを使ってピクセル シェーダーで読み取ります。


### 基本的なライティング

このティアでは、幅広いモバイル デバイスに及ぶようにパフォーマンスを最大にしながら、興味深いライティングでレベルを作成するために静的なライティングと完全にラフなマテリアルを活用します。

**長所**

* 静的なライティングとグローバル イルミネーションへアクセスできます。
* トーン マッピングなどのポストプロセス機能の幾つかへアクセスできるFull HDR パイプラインです。
* 透過は線形空間でブレンドされ、他の UE4 ゲームで普通に行うようにコンテントの作成ができるようになります。


**制限事項**

* 全てのマテリアルを完全にラフにしているので、マテリアルは興味深いスペキュラ リフレクションはありません。
* ライトマップの方向性を無効にした場合も、法線マップにエフェクトはありません。


**推奨事項**

* すべてのマテリアルは、完全にラフなフラグ設定で作成してください。
* パフォーマンスをあげるために、マテリアルのライトマップの方向性の無効化を考慮してください。
* マップではスタティック ライトのみを使用してください。
* ブルームとアンチエイリアシングを無効にしてください。フィルムとカラーコントロールの基本設定も忠実に行ってください。詳細は [モバイル プラットフォーム上でのポストプロセス エフェクト](Platforms/Mobile/PostProcessEffects) を参照してください。


### フル HDR ライティング

このティアでは、UE4 で使用できるほとんどの HDR ライティング機能に加えてポストプロセス機能も活用します。これらの機能は高品質のライティング機能であるがゆえに、使用するためにはかなりのパフォーマンスが要求されます。

**長所**

* 静的なライティングとグローバル イルミネーションへアクセスできます。
* ポストプロセス機能の幾つかへアクセスできるフルの HDR パイプラインです。
* 透過は線形空間でブレンドされ、他の UE4 ゲームで普通に行うようにコンテンツが作成できるようになります。
* 様々なラフネスをサポートしているので、サーフェス上で現実味のあるスペキュラ リフレクションが可能です。
* ノーマルマップ化されたサーフェスを完全にサポートすることで、メッシュにポリゴンを多数追加しなくてもサーフェスの詳細を興味深くすることができます。


**推奨事項**

* ブルームを無効化すると、HDR ライティング パイプラインを大いに活用できます。
* HDR ライティングと組み合わせた現実味のあるスペキュラ リフレクションは、スペキュラのエイリアシングの発生につながります。ノーマルマップの高周波成分の情報によるスペキュラのエイリアシングを軽減しやすくするために、ノーマルマップをラフネス機能にうまく利用すべきです。このアーティファクトを軽減するために、ポストプロセス ボリュームのアンチエイリアシングの有効化も検討すべきです。
* 最善の結果が出せるように賢くリフレクション キャプチャを配置します。
* シーンでは、スタティック ライトのみを使用してください。


### 太陽からのピクセル ライティングごとのフル HDR ライティング

この段階では、UE4 のモバイルで使用できる HDR ライティング機能の全てを利用します。「フル HDR ライティング」と長所も推奨事項も同じですが、単一の指向性ライトのレンダリングの質は格段にあがります。

**長所**

* 機能と長所は、フル HDR ライティングとすべて同じです。
* 単一の指向性ライトに対してピクセルごとのディフューズとスペキュラ ライティング
* 単一の指向性ライトに対して事前計算された高品質の距離フィールド シャドウ


**推奨事項**

* 推奨事項は、フル HDR ライティングとすべて同じです。
* 単一の指向性ライトは固定に設定すべきですが、それ以外はシーンでは Static Light (静的ライト) のみを使用してください。

 
##シェーダー複雑度ビュー モード

PC ES2 プレビュアのシェーダー複雑度ビューモードを使うと、マテリアルの負荷がなんとなく分かります。使用方法は、 
PC ES2 プレビュアのコンソール上で `viewmode shadercomplexity` と入力するだけです。SM5 シェーダー複雑度と同様に、 
緑はパフォーマンス良好、明るい赤はかなり高い負荷、白またはピンクは非常に高い負荷を表します。モバイル ショーケースからのサンプルを 
いくつか紹介します。

[REGION:imagetable]
| ![](1.png)(w:310) | ![](2.png)(w:310) | ![](3.png)(w:310) |
| ----------------- | ----------------- | ----------------- |
| [INCLUDE:#image1] | [INCLUDE:#image2] | [INCLUDE:#image3] |
[/REGION]

<!--
[EXCERPT:Image1]
このサンプルの柱のマテリアルはかなり負荷が大きく、透過ボリューム シートは非常に負荷が大きいです。このシーンでは、負荷があまりに大きすぎるので、透過シートを削除するようにお願いしました。 
[/EXCERPT:Image1]
[EXCERPT:Image2]
このサンプルの柱は 5 テクスチャ ルックアップを全て使用し、レイヤー処理をたくさん行ったので、負荷がかなり大きいです。そのような処理をしなければ、30fps で十分です。
[/EXCERPT:Image2]
[EXCERPT:Image3]
このサンプルでは木がピクセルの負荷を非常に高くしています。プレイヤーが近寄ったりマテリアルで画面を覆うと、負荷は最大になります。
[/EXCERPT:Image3]
-->

## モバイル コンテンツ スケール係数 
Mobile Content Scale Factor はプロジェクトの解像度をスケーリングして、プロジェクトを表示するるモバイル デバイスの画面解像度を最適にする手段です。 
プロジェクトの config フォルダの中に **DefaultDeviceProfiles.INI** という名前の .INI ファイルを新規作成すれば、複数のデバイス プロファイルの作成と格納が可能ｎなります。 
このファイルの中に、以下のコマンドを入力してプロジェクトの解像度を指定します。 

	 r.MobileContentScaleFactor = 

このコマンドを使って Mobile Content Scale Factor を実行したサンプルが以下の画像です。

![](T_MCF_INI_File.png)

上の画像は UE4 Tappy Chicken プロジェクトです。各種モバイル デバイスで再生すると解像度の変化の様子を比較することができます。
ファイルの上部で iOS デバイス用の解像度のスケーリングを行い、下部では Android デバイスの解像度のスケーリングを行います。
**r.MobileContentScaleFactor** の後に付いている番号を確認してください。
コマンドの後にある数字で、プロジェクトの解像度の拡大縮小を判断します。


### iOS 向けモバイル コンテンツ スケール係数
iOS デバイス向けのモバイル コンテンツ スケール係数を使う場合は、r.MobileContentScaleFactor に続く番号により次の結果が決まります。
スケール係数が 0.0 以外の実際の解像度は、画面のアスペクト比に合うように修正されて、ネイティブ解像度にクランプされます。

[region:note]
iOS scale factor は Apple のスケール係数システムに直接関係します。
[/region]

**r.MobileContentScaleFactor 0.0**:デバイスのネイティブ解像度を使います。

**r.MobileContentScaleFactor 1.0**:Retina デバイス上での解像度は retina 対応ではありません。

**r.MobileContentScaleFactor 2.0**:IPhone 5S や iPad Air などではフル ネイティブ解像度です。

**r.MobileContentScaleFactor 3.0**:Iphone 6+ 向けのフル ネイティブ解像度です。

### Android 向けモバイル コンテンツ スケール係数
Android デバイス向けのモバイル コンテンツ スケール係数を使う場合は、r.MobileContentScaleFactor に続く番号により次の結果が決まります。
スケール係数が 0.0 以外の実際の解像度は、画面のアスペクト比に合うように修正されて、ネイティブ解像度にクランプされます。

**r.MobileContentScaleFactor 0.0**:デバイスのネイティブ解像度を使います。

**r.MobileContentScaleFactor 1.0**:ランドスケープが 1280 x 720、ポートレートが 720 x 1280 の解像度になります。

**r.MobileContentScaleFactor 2.0**:ランドスケープが 2560 x 1440、ポートレートが 1440 x 2560 の解像度になります。

