// Copyright (c) 2015 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/ctocpp/binary_value_ctocpp.h"
#include "libcef_dll/ctocpp/sslcert_principal_ctocpp.h"
#include "libcef_dll/ctocpp/sslinfo_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

CefRefPtr<CefSSLCertPrincipal> CefSSLInfoCToCpp::GetSubject() {
  if (CEF_MEMBER_MISSING(struct_, get_subject))
    return NULL;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_sslcert_principal_t* _retval = struct_->get_subject(struct_);

  // Return type: refptr_same
  return CefSSLCertPrincipalCToCpp::Wrap(_retval);
}

CefRefPtr<CefSSLCertPrincipal> CefSSLInfoCToCpp::GetIssuer() {
  if (CEF_MEMBER_MISSING(struct_, get_issuer))
    return NULL;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_sslcert_principal_t* _retval = struct_->get_issuer(struct_);

  // Return type: refptr_same
  return CefSSLCertPrincipalCToCpp::Wrap(_retval);
}

CefRefPtr<CefBinaryValue> CefSSLInfoCToCpp::GetSerialNumber() {
  if (CEF_MEMBER_MISSING(struct_, get_serial_number))
    return NULL;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_binary_value_t* _retval = struct_->get_serial_number(struct_);

  // Return type: refptr_same
  return CefBinaryValueCToCpp::Wrap(_retval);
}

CefTime CefSSLInfoCToCpp::GetValidStart() {
  if (CEF_MEMBER_MISSING(struct_, get_valid_start))
    return CefTime();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_time_t _retval = struct_->get_valid_start(struct_);

  // Return type: simple
  return _retval;
}

CefTime CefSSLInfoCToCpp::GetValidExpiry() {
  if (CEF_MEMBER_MISSING(struct_, get_valid_expiry))
    return CefTime();

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_time_t _retval = struct_->get_valid_expiry(struct_);

  // Return type: simple
  return _retval;
}

CefRefPtr<CefBinaryValue> CefSSLInfoCToCpp::GetDEREncoded() {
  if (CEF_MEMBER_MISSING(struct_, get_derencoded))
    return NULL;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_binary_value_t* _retval = struct_->get_derencoded(struct_);

  // Return type: refptr_same
  return CefBinaryValueCToCpp::Wrap(_retval);
}

CefRefPtr<CefBinaryValue> CefSSLInfoCToCpp::GetPEMEncoded() {
  if (CEF_MEMBER_MISSING(struct_, get_pemencoded))
    return NULL;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_binary_value_t* _retval = struct_->get_pemencoded(struct_);

  // Return type: refptr_same
  return CefBinaryValueCToCpp::Wrap(_retval);
}


#ifndef NDEBUG
template<> base::AtomicRefCount CefCToCpp<CefSSLInfoCToCpp, CefSSLInfo,
    cef_sslinfo_t>::DebugObjCt = 0;
#endif

