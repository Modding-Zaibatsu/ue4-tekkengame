// Copyright (c) 2015 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/command_line_cpptoc.h"
#include "libcef_dll/cpptoc/scheme_registrar_cpptoc.h"
#include "libcef_dll/ctocpp/app_ctocpp.h"
#include "libcef_dll/ctocpp/browser_process_handler_ctocpp.h"
#include "libcef_dll/ctocpp/render_process_handler_ctocpp.h"
#include "libcef_dll/ctocpp/resource_bundle_handler_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

void CefAppCToCpp::OnBeforeCommandLineProcessing(const CefString& process_type,
    CefRefPtr<CefCommandLine> command_line) {
  if (CEF_MEMBER_MISSING(struct_, on_before_command_line_processing))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: command_line; type: refptr_diff
  DCHECK(command_line.get());
  if (!command_line.get())
    return;
  // Unverified params: process_type

  // Execute
  struct_->on_before_command_line_processing(struct_,
      process_type.GetStruct(),
      CefCommandLineCppToC::Wrap(command_line));
}

void CefAppCToCpp::OnRegisterCustomSchemes(
    CefRefPtr<CefSchemeRegistrar> registrar) {
  if (CEF_MEMBER_MISSING(struct_, on_register_custom_schemes))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: registrar; type: refptr_diff
  DCHECK(registrar.get());
  if (!registrar.get())
    return;

  // Execute
  struct_->on_register_custom_schemes(struct_,
      CefSchemeRegistrarCppToC::Wrap(registrar));
}

CefRefPtr<CefResourceBundleHandler> CefAppCToCpp::GetResourceBundleHandler() {
  if (CEF_MEMBER_MISSING(struct_, get_resource_bundle_handler))
    return NULL;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_resource_bundle_handler_t* _retval = struct_->get_resource_bundle_handler(
      struct_);

  // Return type: refptr_same
  return CefResourceBundleHandlerCToCpp::Wrap(_retval);
}

CefRefPtr<CefBrowserProcessHandler> CefAppCToCpp::GetBrowserProcessHandler() {
  if (CEF_MEMBER_MISSING(struct_, get_browser_process_handler))
    return NULL;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_browser_process_handler_t* _retval = struct_->get_browser_process_handler(
      struct_);

  // Return type: refptr_same
  return CefBrowserProcessHandlerCToCpp::Wrap(_retval);
}

CefRefPtr<CefRenderProcessHandler> CefAppCToCpp::GetRenderProcessHandler() {
  if (CEF_MEMBER_MISSING(struct_, get_render_process_handler))
    return NULL;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Execute
  cef_render_process_handler_t* _retval = struct_->get_render_process_handler(
      struct_);

  // Return type: refptr_same
  return CefRenderProcessHandlerCToCpp::Wrap(_retval);
}


#ifndef NDEBUG
template<> base::AtomicRefCount CefCToCpp<CefAppCToCpp, CefApp,
    cef_app_t>::DebugObjCt = 0;
#endif

