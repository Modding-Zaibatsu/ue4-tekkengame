// Copyright (c) 2015 The Chromium Embedded Framework Authors. All rights
// reserved. Use of this source code is governed by a BSD-style license that
// can be found in the LICENSE file.
//
// ---------------------------------------------------------------------------
//
// This file was generated by the CEF translator tool. If making changes by
// hand only do so within the body of existing method and function
// implementations. See the translator.README.txt file in the tools directory
// for more information.
//

#include "libcef_dll/cpptoc/browser_cpptoc.h"
#include "libcef_dll/cpptoc/context_menu_params_cpptoc.h"
#include "libcef_dll/cpptoc/frame_cpptoc.h"
#include "libcef_dll/cpptoc/menu_model_cpptoc.h"
#include "libcef_dll/ctocpp/context_menu_handler_ctocpp.h"


// VIRTUAL METHODS - Body may be edited by hand.

void CefContextMenuHandlerCToCpp::OnBeforeContextMenu(
    CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame,
    CefRefPtr<CefContextMenuParams> params, CefRefPtr<CefMenuModel> model) {
  if (CEF_MEMBER_MISSING(struct_, on_before_context_menu))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get())
    return;
  // Verify param: frame; type: refptr_diff
  DCHECK(frame.get());
  if (!frame.get())
    return;
  // Verify param: params; type: refptr_diff
  DCHECK(params.get());
  if (!params.get())
    return;
  // Verify param: model; type: refptr_diff
  DCHECK(model.get());
  if (!model.get())
    return;

  // Execute
  struct_->on_before_context_menu(struct_,
      CefBrowserCppToC::Wrap(browser),
      CefFrameCppToC::Wrap(frame),
      CefContextMenuParamsCppToC::Wrap(params),
      CefMenuModelCppToC::Wrap(model));
}

bool CefContextMenuHandlerCToCpp::OnContextMenuCommand(
    CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame,
    CefRefPtr<CefContextMenuParams> params, int command_id,
    EventFlags event_flags) {
  if (CEF_MEMBER_MISSING(struct_, on_context_menu_command))
    return false;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get())
    return false;
  // Verify param: frame; type: refptr_diff
  DCHECK(frame.get());
  if (!frame.get())
    return false;
  // Verify param: params; type: refptr_diff
  DCHECK(params.get());
  if (!params.get())
    return false;

  // Execute
  int _retval = struct_->on_context_menu_command(struct_,
      CefBrowserCppToC::Wrap(browser),
      CefFrameCppToC::Wrap(frame),
      CefContextMenuParamsCppToC::Wrap(params),
      command_id,
      event_flags);

  // Return type: bool
  return _retval?true:false;
}

void CefContextMenuHandlerCToCpp::OnContextMenuDismissed(
    CefRefPtr<CefBrowser> browser, CefRefPtr<CefFrame> frame) {
  if (CEF_MEMBER_MISSING(struct_, on_context_menu_dismissed))
    return;

  // AUTO-GENERATED CONTENT - DELETE THIS COMMENT BEFORE MODIFYING

  // Verify param: browser; type: refptr_diff
  DCHECK(browser.get());
  if (!browser.get())
    return;
  // Verify param: frame; type: refptr_diff
  DCHECK(frame.get());
  if (!frame.get())
    return;

  // Execute
  struct_->on_context_menu_dismissed(struct_,
      CefBrowserCppToC::Wrap(browser),
      CefFrameCppToC::Wrap(frame));
}


#ifndef NDEBUG
template<> base::AtomicRefCount CefCToCpp<CefContextMenuHandlerCToCpp,
    CefContextMenuHandler, cef_context_menu_handler_t>::DebugObjCt = 0;
#endif

